@model DiscoveryCenter.Models.ReportsViewModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Report For Survey: @Model.SurveyName</h2>
<br/>

<a id="ExportToCSV" class="btn btn-default" type="button" href="@Url.Action("ExportToCSV", "Report", new { id = @Model.SurveyId, exportRawData = true})">Download This Report With Summarized AND Raw Data</a>
<a id="ExportToCSV" class="btn btn-default" type="button" href="@Url.Action("ExportToCSV", "Report", new { id = @Model.SurveyId, exportRawData = false})">Download This Report With Summarized Data Only</a>

<script>
    var dataForCharts = [];
    var dataForChartsCount = @Model.Reports.Count;
</script>

@for (int i = 0; i < @Model.Reports.Count; i++)
{
    <h4>Question: @Model.Reports[i].Text</h4>
    // Transform the Dictionary<string,int> to JSON in [ "string", int ] form
    var entries = @Model.Reports[i].Counts.Select(d =>
        string.Format("[\"{0}\", {1}]", d.Key, string.Join(",", d.Value)));
    var result = "[" + string.Join(",", entries) + "]";
    //<p>DEBUG result: @result</p>
    
    // Create the div for the chart for this question
    var divId = "chartdiv" + @Model.Reports[i].QuestionIndex;
    <div id="@divId" style="height:400px;width:400px; "></div>

    // Add this data to the dataForCharts array to be referenced later. HTML.Raw is used to avoid encoding
    <script>dataForCharts[@Model.Reports[i].QuestionIndex] = JSON.parse('@Html.Raw(result)');</script>
}

<script>
    $(document).ready(function(){
        // Questions were put into array based on their QuestionIndex value, which is >= 1 so start i=1
        for(var i = 1; i < dataForCharts.length; i++)
        {
            var data = dataForCharts[i];
            if (data == null || data.length == 0)
            {
                $('#chartdiv' + i).replaceWith('<p>No Data for this question</p>');
            }
            else
            {
                var plot = $.jqplot('chartdiv' + i, [data],
                    {
                        seriesDefaults: {
                            // Make this a pie chart.
                            renderer: $.jqplot.PieRenderer,
                            rendererOptions: {
                                // Put data labels on the pie slices.
                                // By default, labels show the percentage of the slice.
                                showDataLabels: true
                            }
                        },
                        legend: { 
                            show:true,
                            location: 'e',
                            placement: 'outside'
                        }
                    }
                );
            }
        }
    });
</script>
