@using DiscoveryCenter.Models
@model DiscoveryCenter.Models.Question

@{
    string guid = Guid.NewGuid().ToString();
    string[] choices;
    bool allowDelete = true;
    if(!String.IsNullOrEmpty(Model.Choices))
    {
        choices = Model.Choices.Split(';');
        if (Model.Type == Question.QuestionType.Slider)
        {
            choices = choices.Take(3).ToArray();
        }
    }
    else if(Model.Type == Question.QuestionType.Slider)
    {
        choices = new string[] { "", "", ""};
    }
    else
    {
        choices = new string[] { "" };
    }
    
    if(Model.Type == Question.QuestionType.Slider)
    {
        allowDelete = false;
    }
    
    List<SelectListItem> maxSelectedChoicesList = new List<SelectListItem>();
    SelectListItem item;
    for (int i = 0; i < 9; i++ )
    {
        item = new SelectListItem();
        if (i == 0)
        {
            item.Text = "No Limit";
        }
        else
        {
            item.Text = i.ToString();
        }

        item.Value = i.ToString();

        if (i == Model.MaxSelectedChoices)
        { 
            item.Selected = true;
        }
        maxSelectedChoicesList.Add(item);
    }    
}

@if (Model.Type == Question.QuestionType.MultipleChoiceChooseMany || Model.Type == Question.QuestionType.ExhibitsChooseMany)
{
    <div class="form-group">
        @Html.LabelFor(m => m.MaxSelectedChoices, new { @class = "col-md-3 control-label" })
        <div class="col-md-3">
            @Html.DropDownList(String.Format("Questions[{0}].MaxSelectedChoices", guid), maxSelectedChoicesList, 
                new { @class = "form-control", @style = "width:100%;max-width:none;resize:none;", })
        </div>
    </div>
}
@if(Model.Type != Question.QuestionType.ShortAnswer && Model.Type != Question.QuestionType.ExhibitsChooseMany)
{
    <div class="form-group">
        @Html.LabelFor(m => m.Choices, new { @class = "col-md-3 control-label" })
        <div class="col-md-9" style="padding-left:0px">
            <div class="AppendChoices">
                @for (int i = 0; i < choices.Length; i++)
                {
                    @Html.Partial("_ChoiceBox", new ChoiceBoxViewModel()
            {
                NameAndId = String.Format("Questions[{0}].Choice[{1}]", guid, i),
                Value = choices[i],
                AllowDelete = allowDelete
            })
                }
            </div>
            <div class="col-md-5">
                @if (Model.Type == Question.QuestionType.MultipleChoiceChooseMany || Model.Type == Question.QuestionType.MultipleChoiceChooseOne)
                {
                    <button id="addChoice" onclick="AppendChoiceBox(this, '@(allowDelete.ToString())')" class="btn btn-primary" type="button">
                        <span class="glyphicon glyphicon-plus"></span> Add Choice
                    </button>
                }
            </div>
        </div>
    </div>
    }
