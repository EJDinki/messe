@using DiscoveryCenter.Models
@model DiscoveryCenter.Models.Question

@{
    string guid = Guid.NewGuid().ToString();
    bool allowDelete = true;

    if (Model.Type == Question.QuestionType.Slider)
    {
        allowDelete = false;
    }

    List<SelectListItem> maxSelectedChoicesList = new List<SelectListItem>();
    SelectListItem item;
    for (int i = 0; i < 9; i++)
    {
        item = new SelectListItem();
        if (i == 0)
        {
            item.Text = "No Limit";
        }
        else
        {
            item.Text = i.ToString();
        }

        item.Value = i.ToString();

        if (i == Model.MaxSelectedChoices)
        {
            item.Selected = true;
        }
        maxSelectedChoicesList.Add(item);
    }

    List<SelectListItem> storedImageNames = new List<SelectListItem>();
    storedImageNames.Add(new SelectListItem() { Text = "None", Value = "" });

    foreach (string image in Directory.GetFiles(Server.MapPath("~/Content/images/choiceImage")))
    {
        string val = "/Content/images/choiceImage/" + Path.GetFileName(image);
        storedImageNames.Add(new SelectListItem() { Text = Path.GetFileName(image), Value = val });
    }
}

@if (Model.Type == Question.QuestionType.MultipleChoiceChooseMany || Model.Type == Question.QuestionType.ExhibitsChooseMany)
{
    <div class="form-group">
        @Html.LabelFor(m => m.MaxSelectedChoices, new { @class = "col-md-3 control-label" })
        <div class="col-md-3">
            @Html.DropDownList(String.Format("Questions[{0}].MaxSelectedChoices", guid), maxSelectedChoicesList,
                new { @class = "form-control", @style = "width:100%;max-width:none;resize:none;", })
        </div>
    </div>
}
@if (Model.Type != Question.QuestionType.ShortAnswer &&
    Model.Type != Question.QuestionType.ExhibitsChooseMany &&
    Model.Type != Question.QuestionType.Spinner)
{
    <div class="form-group">
        @Html.LabelFor(m => m.Choices, new { @class = "col-md-3 control-label" })
        <div class="col-md-9" style="padding-left:0px">
            <div class="AppendChoices">
                @{
    int length = 0;
    if (Model.Type == Question.QuestionType.Slider)
    {
        @Html.Partial("_ChoiceBox", new ChoiceBoxViewModel()
            {
                NameAndId = String.Format("Questions[{0}].Choice[{1}]", guid, 0),
                ImgChoiceId = String.Format("Questions[{0}].Img[{1}]", guid, 0),
                Value = Model.Choices[0].Text,
                ImageName = Model.Choices[0].ImageName,
                AvailableImages = storedImageNames,
                AllowDelete = allowDelete
            })

        foreach (SelectListItem selItem in storedImageNames)
        {
            selItem.Selected = false;
        }
        @Html.Partial("_ChoiceBox", new ChoiceBoxViewModel()
            {
                NameAndId = String.Format("Questions[{0}].Choice[{1}]", guid, 1),
                ImgChoiceId = String.Format("Questions[{0}].Img[{1}]", guid, 1),
                Value = Model.Choices[1].Text,
                ImageName = Model.Choices[1].ImageName,
                AvailableImages = storedImageNames,
                AllowDelete = allowDelete
            })

        foreach (SelectListItem selItem in storedImageNames)
        {
            selItem.Selected = false;
        }
    }
    else
    {
        length = Model.Choices.Count;

        for (int i = 0; i < length; i++)
        {
            @Html.Partial("_ChoiceBox", new ChoiceBoxViewModel()
            {
                NameAndId = String.Format("Questions[{0}].Choice[{1}]", guid, i),
                ImgChoiceId = String.Format("Questions[{0}].Img[{1}]", guid, i),
                Value = Model.Choices[i].Text,
                ImageName = Model.Choices[i].ImageName,
                AvailableImages = storedImageNames,
                AllowDelete = allowDelete
            })
            foreach (SelectListItem selItem in storedImageNames)
            {
                selItem.Selected = false;
            }
        }
        }
    }


            </div>
            @if (Model.Type == Question.QuestionType.MultipleChoiceChooseMany || Model.Type == Question.QuestionType.MultipleChoiceChooseOne)
            {
            <div class="col-md-5">
                
                    <button id="addChoice" onclick="AppendChoiceBox(this, '@(allowDelete.ToString())')" class="btn btn-primary" type="button">
                        <span class="glyphicon glyphicon-plus"></span> Add Choice
                    </button>
            
            </div>
            }
        </div>
    </div>
}
