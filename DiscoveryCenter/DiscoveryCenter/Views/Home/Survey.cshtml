@model DiscoveryCenter.Models.SurveyViewModel
@using DiscoveryCenter.Models

@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_SurveyLayout.cshtml";
}

<audio id="onNextSound" preload="auto">
    <source src="@Model.Theme.NextButtonAudio" type="audio/mpeg" />
</audio>
<div class="selection-alert-wrapper">
    <div id="alert" class="alert alert-danger selection-alert" role="alert" hidden>Please pick only 3 choices.</div>
</div>

<audio id="onPreviousSound" preload="auto">
    <source src="@Model.Theme.PrevButtonAudio" type="audio/mpeg" />
</audio>

@using (Html.BeginForm("Survey", "Home", FormMethod.Post)) { 
        <!-- Left and right controls -->
        <a id="pQuestion" class="left carousel-control pull-left " href="#myCarousel" role="button" data-slide="prev" hidden>
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
            <span class="carousel-control-caption-prev">Previous</span>
        </a>
        <a id="nQuestion" class="right carousel-control pull-right" href="#myCarousel" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
            <span class="carousel-control-caption-next">Next</span>
        </a>

<div class="panel">
    <div class="panel-heading">
        <img id="discoveryLogo" src="~/Content/images/discovery75.png" />
        
        <a id="quitSurvey" class="btn btn-lg pull-right" type="button" href="#" onclick="confirmExit();">
            <span class="glyphicon glyphicon-remove-circle pull-right"></span>
        </a>

        <a id="muteSurvey" class="btn btn-lg pull-right" type="button" href="#" onclick="">
            <span id="muteIcon" class="glyphicon glyphicon-volume-off pull-right"></span>
        </a>
    </div>
    <div class="panel-body">


        @Html.HiddenFor(m => m.SurveyId)
        @Html.HiddenFor(m => m.Muted, new {id="Muted"})

        <div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="false">

            <!-- Wrapper for slides -->
            <div class="carousel-inner" role="listbox">
                @for (int i = 0; i < @Model.QuestionModels.Count; i++)
            {
                string val = i == 0 ? "item active" : "item";
                    <div class="@val" id="slide_@i">
                        @Html.HiddenFor(m => m.QuestionModels[i].Question)
                        @Html.HiddenFor(m => m.QuestionModels[i].QuestionId)

                        <div class="question-text">
                            <p><b>@Model.QuestionModels[i].Question</b></p>
                        </div>
                        <div class="question-choices">
                            @switch (Model.QuestionModels[i].Type)
                            {
                                case (Question.QuestionType.MultipleChoiceChooseOne):
                                    @(Html.Partial("MultipleChoiceChooseOne", Model.QuestionModels[i]))
                                    break;

                                case (Question.QuestionType.MultipleChoiceChooseMany):
                                @(Html.Partial("MultipleChoiceChooseMany", Model.QuestionModels[i]))
                                    break;

                                case (Question.QuestionType.ShortAnswer):
                                @Html.TextArea(String.Format("QuestionModels[{0}].Answer", Model.QuestionModels[i].QuestionId))
                                    break;

                                case (Question.QuestionType.Slider):
                                @(Html.Partial("SliderQuestion", Model.QuestionModels[i]))
                                    break;

                                case (Question.QuestionType.ExhibitsChooseMany):
                                @(Html.Partial("ExhibitsChooseMany", Model.QuestionModels[i]))
                                    break;

                                case (Question.QuestionType.Spinner):
                                <input class="spinner" name=@(String.Format(" QuestionModels[{0}].Answer", i) ) min="@(((SpinnerViewModel)Model.QuestionModels[i]).MinValue)" max="@(((SpinnerViewModel)Model.QuestionModels[i]).MaxValue)" value="@(((SpinnerViewModel)Model.QuestionModels[i]).StartValue)" readonly />
                                    break;

                                default:
                                @Html.HiddenFor(m => m.QuestionModels[i].Answer)
                                    break;
                            }

                            @Html.HiddenFor(m => m.QuestionModels[i].Type)

                        </div>
                    </div>
            }
                <div class="item" id="slide_@Model.QuestionModels.Count">
                    <center>
                        <input type="submit" class="btn btn-default" value="Complete Survey" id="CompleteSurvey" style="margin-top:15%" />
                    </center>
                </div>
            </div>
            <!-- Indicators -->
            <ol class="carousel-indicators">
                <li data-target="#myCarousel" class="active" style="cursor:default"></li>
                @for (int i = 1; i < @Model.QuestionModels.Count; i++)
                {
                    <li data-target="#myCarousel" style="cursor:default"></li>
                }
            </ol>
        </div>
    </div>


</div>
}

@section Styles
{
    <link href="@Url.Content("~/Content/" + Model.Theme.CssFileName)" rel="stylesheet" type="text/css" />
}

@section scripts
{
    <script src="/Scripts/@(Model.Theme.JsFileName)"></script>
    <script>
        var isMuted = false;

        $('#muteSurvey').on('click', function () {
            muteAll();
        });

        function muteAll() {
            console.log("mute Clicked");
            isMuted = !isMuted;
            $('#Muted').val(isMuted);

            if (isMuted) {
                $('#muteIcon').addClass("glyphicon-volume-up");
                $('#muteIcon').removeClass("glyphicon-volume-off");
            }
            else {
                $('#muteIcon').removeClass("glyphicon-volume-up");
                $('#muteIcon').addClass("glyphicon-volume-off");
            }

            $('#onPreviousSound').prop("muted", isMuted);
            $('#onNextSound').prop("muted", isMuted);

        }

        function confirmExit() {
        if(confirm("Are you sure you wish to exit without submitting your answers?"))
            window.location.replace("@Url.Action("Index", "Home", new {id=Model.SurveyId},Request.Url.Scheme)");
        }
        numSlides = @Model.QuestionModels.Count -1;
    </script>
}

