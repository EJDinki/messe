@model DiscoveryCenter.Models.SurveyViewModel
@using DiscoveryCenter.Models

@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_SurveyLayout.cshtml";
}

<div class="jumbotron">
    <h1>Survey Details</h1>
    
    <br/>

    <!-- Left and right controls -->
    <a class="left carousel-control pull-left" href="#myCarousel" role="button" data-slide="prev">
        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
        <span class="sr-only">Previous</span>
    </a>
    <a class="right carousel-control pull-right" href="#myCarousel" role="button" data-slide="next">
        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
        <span class="sr-only">Next</span>
    </a>
    @using (Html.BeginForm("Survey", "Home", FormMethod.Post))
    
    {
        
    <div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="false">
        <!-- Indicators -->
        <ol class="carousel-indicators">
            <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
            @{
        for (int i = 1; i < @Model.QuestionModels.Count; i++)
        {
                    <li data-target="#myCarousel" data-slide-to="@i"></li>
        }
            }
        </ol>

        <!-- Wrapper for slides -->
        <div class="carousel-inner" role="listbox">
        @{
            for (int i = 0; i < @Model.QuestionModels.Count; i++)
            {
                string val = i == 0 ? "item active" : "item";
                            <div class="@val">
                            @Html.HiddenFor(m =>m.QuestionModels[i].Question)
                            @Html.HiddenFor(m => m.QuestionModels[i].QuestionId)
                           
                @{     
                    switch (Model.QuestionModels[i].Type)
                    {
                        case (Question.QuestionType.MultipleChoiceChooseOne):
                            <p>@Model.QuestionModels[i].Question</p>
                            for (int z = 0; z < ((MultipleChoiceViewModel)@Model.QuestionModels[i]).Choices.Count; z++)
                            {

                                @Html.RadioButtonFor(m => m.QuestionModels[i].Answer, 
                                ((MultipleChoiceViewModel)@Model.QuestionModels[i]).Choices[z])
                                @Html.Label((Model.QuestionModels[i] as MultipleChoiceViewModel).Choices[z])

                                <br/>
                            }
                            break;
                        case (Question.QuestionType.MultipleChoiceChooseMany):
                                    <p>@Model.QuestionModels[i].Question</p>
    
                            
                                //Do checkbox here

                                 @*
                                            @Html.HiddenFor(m => (((MultipleSelectViewModel)m.QuestionModels[i]).Choices[z]), new { id = String.Format("{0}{1}choice", i, z), name=String.Format("QuestionModels[{0}].Question.Choices[{1}]", i,z)})
                                        @Html.HiddenFor(m => (((MultipleSelectViewModel)m.QuestionModels[i]).Options[z].text), new { id = String.Format("{0}{1}option", i, z), name = String.Format("QuestionModels[{0}].Question.Options[{1}].text", i, z) })
                                        @Html.CheckBoxFor(m => (((MultipleSelectViewModel)m.QuestionModels[i]).Options[z].IsSelected), new { id =  })
                                            <input id="@(String.Format("{0}{1}choice", i, z))"
                                               name="@(String.Format("QuestionModels[{0}].Question.Choices[{1}]", i, z))" type="hidden" value="Advertisement (Posters, Flyers)" />
                                        <input id="@(String.Format("{0}{1}option", i, z))"
                                               name="@(String.Format("QuestionModels[{0}].Question.Options[{1}].text", i, z))" type="hidden" value="Advertisement (Posters, Flyers)" />
                                        <input data-val="true" data-val-required="The Boolean field is required."
                                               id="@(String.Format("{0}{1}choiceSelected", i, z))"
                                               name="@(String.Format("Questionmodels[{0}].Question.Choices[{1}].IsSelected", i, z))" type="checkbox" value="true" />*@
                                @(Html.Partial("MultipleChoiceChooseMany", Model.QuestionModels[i]))
                                
                            break;
                        case (Question.QuestionType.ShortAnswer):
                                    <p>@Model.QuestionModels[i].Question</p>
                                    @Html.TextBoxFor(m => m.QuestionModels[i].Answer)
                            break;
                        default:
                            @Html.HiddenFor(m => m.QuestionModels[i].Answer)
                            break;
                    }
                    @Html.HiddenFor(m => m.QuestionModels[i].Type)
                if (i == Model.QuestionModels.Count - 1)
                {
                                <br/>
                               <input type="submit" class="col-lg-offset-6" value="Complete Survey"/>
                    }
                }
                         
                            </div>
            }
        }

        </div>
    </div>
    }
    
</div>

